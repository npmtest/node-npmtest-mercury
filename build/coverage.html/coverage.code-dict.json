{"/home/travis/build/npmtest/node-npmtest-mercury/test.js":"/* istanbul instrument in package npmtest_mercury */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mercury/lib.npmtest_mercury.js":"/* istanbul instrument in package npmtest_mercury */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mercury = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mercury = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mercury/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mercury && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mercury */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mercury\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mercury.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mercury.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mercury.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mercury.__dirname + '/lib.npmtest_mercury.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mercury/node_modules/mercury/index.js":"'use strict';\n\nvar SingleEvent = require('geval/single');\nvar MultipleEvent = require('geval/multiple');\nvar extend = require('xtend');\n\n/*\n    Pro tip: Don't require `mercury` itself.\n      require and depend on all these modules directly!\n*/\nvar mercury = module.exports = {\n    // Entry\n    main: require('main-loop'),\n    app: app,\n\n    // Base\n    BaseEvent: require('value-event/base-event'),\n\n    // Input\n    Delegator: require('dom-delegator'),\n    // deprecated: use hg.channels instead.\n    input: input,\n    // deprecated: use hg.channels instead.\n    handles: channels,\n    channels: channels,\n    // deprecated: use hg.send instead.\n    event: require('value-event/event'),\n    send: require('value-event/event'),\n    // deprecated: use hg.sendValue instead.\n    valueEvent: require('value-event/value'),\n    sendValue: require('value-event/value'),\n    // deprecated: use hg.sendSubmit instead.\n    submitEvent: require('value-event/submit'),\n    sendSubmit: require('value-event/submit'),\n    // deprecated: use hg.sendChange instead.\n    changeEvent: require('value-event/change'),\n    sendChange: require('value-event/change'),\n    // deprecated: use hg.sendKey instead.\n    keyEvent: require('value-event/key'),\n    sendKey: require('value-event/key'),\n    // deprecated use hg.sendClick instead.\n    clickEvent: require('value-event/click'),\n    sendClick: require('value-event/click'),\n\n    // State\n    // remove from core: favor hg.varhash instead.\n    array: require('observ-array'),\n    struct: require('observ-struct'),\n    // deprecated: use hg.struct instead.\n    hash: require('observ-struct'),\n    varhash: require('observ-varhash'),\n    value: require('observ'),\n    state: state,\n\n    // Render\n    diff: require('virtual-dom/vtree/diff'),\n    patch: require('virtual-dom/vdom/patch'),\n    partial: require('vdom-thunk'),\n    create: require('virtual-dom/vdom/create-element'),\n    h: require('virtual-dom/virtual-hyperscript'),\n\n    // Utilities\n    // remove from core: require computed directly instead.\n    computed: require('observ/computed'),\n    // remove from core: require watch directly instead.\n    watch: require('observ/watch')\n};\n\nfunction input(names) {\n    if (!names) {\n        return SingleEvent();\n    }\n\n    return MultipleEvent(names);\n}\n\nfunction state(obj) {\n    var copy = extend(obj);\n    var $channels = copy.channels;\n    var $handles = copy.handles;\n\n    if ($channels) {\n        copy.channels = mercury.value(null);\n    } else if ($handles) {\n        copy.handles = mercury.value(null);\n    }\n\n    var observ = mercury.struct(copy);\n    if ($channels) {\n        observ.channels.set(mercury.channels($channels, observ));\n    } else if ($handles) {\n        observ.handles.set(mercury.channels($handles, observ));\n    }\n    return observ;\n}\n\nfunction channels(funcs, context) {\n    return Object.keys(funcs).reduce(createHandle, {});\n\n    function createHandle(acc, name) {\n        var handle = mercury.Delegator.allocateHandle(\n            funcs[name].bind(null, context));\n\n        acc[name] = handle;\n        return acc;\n    }\n}\n\nfunction app(elem, observ, render, opts) {\n    if (!elem) {\n        throw new Error(\n            'Element does not exist. ' +\n            'Mercury cannot be initialized.');\n    }\n\n    mercury.Delegator(opts);\n    var loop = mercury.main(observ(), render, extend({\n        diff: mercury.diff,\n        create: mercury.create,\n        patch: mercury.patch\n    }, opts));\n\n    elem.appendChild(loop.target);\n\n    return observ(loop.update);\n}\n","/home/travis/build/npmtest/node-npmtest-mercury/node_modules/mercury/svg.js":"'use strict';\n\nmodule.exports = require('virtual-dom/virtual-hyperscript/svg');\n","/home/travis/build/npmtest/node-npmtest-mercury/node_modules/mercury/time-travel.js":"'use strict';\n\nmodule.exports = TimeTravel;\n\nfunction TimeTravel(state) {\n    var history = [state()];\n\n    // Tracks the current position in history.\n    var cursor = 0;\n\n    var isRedoOrUndo = false;\n\n    state(function recordState(newState) {\n\n        // This function gets called whenever there is a state change.\n        // State changes happen due to events being handled, or due to\n        // undo/redo.\n\n        // If we are replaying items in the history,\n        // we don't want to re-add them to the end of the history.\n        // Just quit.\n        if (isRedoOrUndo) {\n            return;\n        }\n\n        // If we've made it this far, `newState` is due to a new action,\n        // not due to undo/redo.\n\n        // If we've called `undo` a bunch of times,\n        // the cursor won't be at the end.\n        // Any states past the cursor should be cut off.\n        history.splice(cursor + 1);\n\n        // Add the new item to the history\n        history.push(newState);\n\n        cursor = history.length - 1;\n    });\n\n    return { undo: undo, redo: redo };\n\n    function undo() {\n        if (cursor < 1) {\n            // Don't move before the beginning of time\n            return undefined;\n        }\n\n        cursor--;\n        isRedoOrUndo = true;\n        state.set(history[cursor]);\n        isRedoOrUndo = false;\n        return history[cursor];\n    }\n\n    function redo() {\n        if (cursor + 1 >= history.length) {\n            // Don't move past the end of time\n            return undefined;\n        }\n\n        cursor++;\n        isRedoOrUndo = true;\n        state.set(history[cursor]);\n        isRedoOrUndo = false;\n        return history[cursor];\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-mercury/node_modules/mercury/bin/browserify-editor.js":"'use strict';\n\nvar browserify = require('browserify');\nvar fs = require('fs');\nvar path = require('path');\nvar cuid = require('cuid');\nvar process = require('process');\n\nfunction addLink(href) {\n    return '' +\n        'var link = document.createElement(\"link\")\\n' +\n        'link.rel = \"stylesheet\"\\n' +\n        'link.href = \"' + href + '\"\\n' +\n        'document.head.appendChild(link)\\n';\n}\n\nfunction floatElement(name, float) {\n    return '' +\n        name + '.style.float = \"' + float + '\"\\n' +\n        name + '.style.padding = 0\\n' +\n        name + '.style.margin = 0\\n' +\n        name + '.style.width = \"50%\"\\n';\n}\n\nfunction main(fileName) {\n    var src = fs.readFileSync(path.resolve(fileName), 'utf8');\n\n    var code = '' +\n        'var container = document.createElement(\"div\")\\n' +\n        floatElement('document.body', 'left') +\n        floatElement('container', 'right') +\n        'var createEditor = require(\"javascript-editor\")\\n' +\n        'window.addEventListener(\"load\", function () {\\n' +\n        '    var editor = createEditor({\\n' +\n        '        container: container,\\n' +\n        '        value: ' + JSON.stringify(src) + ',\\n' +\n        '        readOnly: true\\n' +\n        '    })\\n' +\n        '    container.childNodes[0].style.fontSize = \"12px\"\\n' +\n        '    editor.editor.refresh()\\n' +\n        '})\\n' +\n        'document.documentElement.appendChild(container)\\n' +\n        addLink('https://cdn.rawgit.com/maxogden/javascript-editor/' +\n            '1835d09bdfe83e5121befe2ff660bc336a520d9a/css/codemirror.css') +\n        addLink('https://cdn.rawgit.com/maxogden/javascript-editor/' +\n            '1835d09bdfe83e5121befe2ff660bc336a520d9a/css/theme.css');\n\n    var loc = path.join(__dirname, cuid() + '.js');\n    fs.writeFileSync(loc, code);\n\n    var bundle = browserify();\n    bundle.add(path.resolve(fileName));\n    bundle.add(loc);\n    var stream = bundle.bundle();\n    stream.on('end', function onEnd() {\n        fs.unlinkSync(loc);\n    });\n    return stream;\n}\n\nmodule.exports = main;\n\nif (require.main === module) {\n    var file = process.argv[2];\n    main(file).pipe(process.stdout);\n}\n"}